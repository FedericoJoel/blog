<?php

namespace Tests\Unit;

use App\Repositories\Eloquent\GeneradorNumeroCredito;
use App\Repositories\Eloquent\Cuota;
use App\Repositories\Eloquent\Repos\CuotasRepo;
use App\Repositories\Eloquent\Repos\Gateway\SolicitudGateway;
use App\Repositories\Eloquent\Repos\ProveedoresRepo;
use App\Repositories\Eloquent\Repos\VentasRepo;
use App\Repositories\Eloquent\Ventas;
use Carbon\Carbon;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class SolicitudesEsperandoMutualTest extends TestCase
{
    use DatabaseTransactions;

    private $solicitudGateway;
    private $solCreada;
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->solicitudGateway = new SolicitudGateway();
        $data = $this->getData();
        $this->solCreada = $this->solicitudGateway->create($data->toArray());
    }

    public function getData()
    {
        return collect([
            'id_socio' => 1,
            'comercializador' => '1',
            'estado' => 'Procesando Solicitud',
            'monto_por_cuota' => '200',
            'total' => '500',
            'cuotas' => '2',
            'agente_financiero' => 11,
        ]);
    }

    public function testEsperandoEndeudamientoYAgenteYcompletoUno()
    {
        $elem = collect();
        $col = collect();
        if($elem->has('doc_endeudamiento'))
        {
            $endeudamiento = $elem['doc_endeudamiento'];
            $col->put('doc_endeudamiento', $endeudamiento);

        }
        if ($elem->has('agente_financiero'))
        {
            $agente = $elem['agente_financiero'];
            $col->put('agente_financiero', $agente);
        }

        $sol = $this->solicitudGateway->update($col->toArray(), $this->solCreada->id);
        $sol->estado = $sol->doc_endeudamiento != null && $sol->agente_financiero != null ? 'Inversionista Asignado' : 'Procesando Solicitud';
        $sol->save();
        $this->assertEquals($sol->doc_endeudamiento, null);
        $this->assertEquals($sol->agente_financiero, 11);
        $this->assertEquals($sol->estado, 'Procesando Solicitud');
    }

    public function testEsperandoEndeudamientoYAgenteYcompletoAmbos()
    {
        $elem = collect(['doc_endeudamiento' => '200', 'agente_financiero' => 1]);
        $col = collect();
        if($elem->has('doc_endeudamiento'))
        {
            $endeudamiento = $elem['doc_endeudamiento'];
            $col->put('doc_endeudamiento', $endeudamiento);

        }
        if ($elem->has('agente_financiero'))
        {
            $agente = $elem['agente_financiero'];
            $col->put('agente_financiero', $agente);
        }

        $sol = $this->solicitudGateway->update($col->toArray(), $this->solCreada->id);
        $sol->estado = $sol->doc_endeudamiento != null && $sol->agente_financiero != null ? 'Inversionista Asignado' : 'Procesando Solicitud';
        $sol->save();
        $this->assertEquals($sol->estado, 'Inversionista Asignado');
        $this->assertEquals($sol->doc_endeudamiento, 200);
        $this->assertEquals($sol->agente_financiero, 1);
    }

    public function testAprobarSolicitud()
    {
        $cuotasPiolas = collect();

        $fecha_ingreso = Carbon::today()->toDateString();
        $ventasRepo = new VentasRepo();
        $proveedorRepo = new ProveedoresRepo();
        $cuotasRepo = new CuotasRepo();
        $sol = $this->solicitudGateway->update(['estado' => 'Solicitud Aprobada'], $this->solCreada->id);

        $sol->socio()->restore();
        $socioPosta = $sol->socio;
        $socioPosta->fecha_ingreso = $fecha_ingreso;
        $socioPosta->save();

        $socio = $sol->id_socio;
        $cuotas = $sol->cuotas;
        $montoPorCuota = $sol->monto_por_cuota;
        $total = $montoPorCuota * $cuotas;
        $proveedor = $sol->agente_financiero;
        $proveedor = $proveedorRepo->findProductos($proveedor);
        $producto = $proveedor->getProductos()->first();

        $fechaVto = new Carbon();
        $fechaInicio = new Carbon();
        $fechaInicioDeVto = $fechaVto->today()->addMonths(2);
        $venta = $ventasRepo->create([
            'id_asociado' => $socio,
            'id_producto' => $producto->getId(),
            'nro_cuotas' => $cuotas,
            'importe' => $total,
            'fecha_vencimiento' => $fechaInicioDeVto->toDateString(),
        ]);
        $ventaExpected = new Ventas($venta->getId(), null, $cuotas, $total, $fechaInicioDeVto->toDateString(), 3);

        GeneradorNumeroCredito::generar($venta);
        $fechaInicio->today();
        $cuota1 = $cuotasRepo->create([
            'cuotable_id' => $venta->getId(),
            'cuotable_type' => 'App\Ventas',
            'importe' => $montoPorCuota,
            'fecha_inicio' => $fechaInicio->toDateString(),
            'fecha_vencimiento' => $fechaInicioDeVto->toDateString(),
            'nro_cuota' => '1',
        ]);
        $cuotaExpected = new Cuota($cuota1->getId(), $montoPorCuota, $fechaInicioDeVto->toDateString(), $fechaInicio->toDateString(), 1, null);

        $fechaInicio->addMonths(2);

        for ($i = 2; $i <= $cuotas; $i++) {
            $fechaInicioDeVto = $fechaInicioDeVto->addMonth();
            $cuota = $cuotasRepo->create([
                'cuotable_id' => $venta->getId(),
                'cuotable_type' => 'App\Ventas',
                'importe' => $montoPorCuota,
                'fecha_inicio' => $fechaInicio->toDateString(),
                'fecha_vencimiento' => $fechaInicioDeVto->toDateString(),
                'nro_cuota' => $i,
            ]);
            if($i == 2)
            {

                $cuota2Expected = new Cuota($cuota->getId(), (double)$montoPorCuota, $fechaInicioDeVto->toDateString(), $fechaInicio->toDateString(), 2, null);
                $cuotasPiolas->put('cuota2', $cuota2Expected);
            }
            $fechaInicio = $fechaInicio->addMonth();

        }

        $this->assertEquals($cuotaExpected, $cuota1);
        $this->assertEquals($cuotasPiolas['cuota2'], $cuotasRepo->find($cuotasPiolas['cuota2']->getId()));
        $this->assertEquals($ventaExpected, $venta);
        $this->assertEquals($sol->socio->deleted_at, null);
        $this->assertEquals($sol->estado, 'Solicitud Aprobada');
    }




}
