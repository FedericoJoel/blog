<?php

namespace Tests\Unit;

use App\Imputacion;
use Faker\Factory;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ABM_OperacionesTest extends TestCase
{
    use DatabaseMigrations;

    public $factory;
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $capituloResultado = factory(\App\Capitulo::class)->create(['nombre' => 'Resultado', 'codigo' => 5]);
        $rubroRecursos = factory(\App\Rubro::class)->create(['id_capitulo' => $capituloResultado->id, 'nombre' => 'Recursos', 'codigo' => 51]);
        $monedaRecursosEnPesos = factory(\App\Moneda::class)->create(['id_rubro' => $rubroRecursos->id, 'nombre' => 'Recursos en pesos', 'codigo' => 511]);
        $dptoGeneral= factory(\App\Departamento::class)->create(['id_moneda' => $monedaRecursosEnPesos->id, 'nombre' => 'Dpto general', 'codigo' => 51103]);
        $subRubroRecursosEspecificos = factory(\App\SubRubro::class)->create(['id_departamento' => $dptoGeneral->id, 'nombre' => 'Recursos especificos', 'codigo' => 5110301]);
        $imputacion5 = factory(\App\Imputacion::class)->create(['id_subrubro' => $subRubroRecursosEspecificos->id, 'nombre' => 'Caja - Efectivo', 'codigo' => 111010101]);
        $imputacion5 = factory(\App\Imputacion::class)->create(['id_subrubro' => $subRubroRecursosEspecificos->id, 'nombre' => 'Caja - Efectivo2', 'codigo' => 11101012]);

    }

    public function data()
    {
        $f = Factory::create('App\Capitulo');
        return [
            'id' => 1,
            'nombre' => $f->firstName(),
            'entrada' => 1,
            'salida'  => 0,
            'imputacion1' => 1,
            'debe1' => 1,
            'haber1' => 0,
            'imputacion2' => 2,
            'debe2' => 0,
            'haber2' => 1
        ];
    }

    public function data2()
    {
        $f = Factory::create('App\Capitulo');
        return [
            'id' => 1,
            'nombre' => $f->firstName(),
            'entrada' => 0,
            'salida'  => 1,
            'imputacion1' => 1,
            'debe1' => 0,
            'haber1' => 1,
            'imputacion2' => 2,
            'debe2' => 1,
            'haber2' => 0
        ];
    }

    public function testAltaOperacion()
    {
        $data = $this->data();
        $this->post('operaciones', $data);
        $imp1 = collect();
        $imp2 = collect();

        $imp1->put('debe', $data['debe1']);
        $imp1->put('haber', $data['haber1']);
        $imp1->put('id_operacion', 1);
        $imp1->put('id_imputacion', 1);

        $imp2->put('debe', $data['debe2']);
        $imp2->put('haber', $data['haber2']);
        $imp2->put('id_operacion', 1);
        $imp2->put('id_imputacion', 2);
        unset($data['debe1'], $data['debe2'], $data['haber1'], $data['haber2'], $data['id'], $data['imputacion1'], $data['imputacion2']);

        $this->assertDatabaseHas('operaciones', $data);
        $this->assertDatabaseHas('operacion_imputacion', $imp1->toArray());
        $this->assertDatabaseHas('operacion_imputacion', $imp2->toArray());

    }

    public function testUpdateOperacion()
    {
        $data = $this->data();
        $this->post('operaciones', $data);
        $data2 = $this->data2();
        $this->put('operaciones/1', $data2);
        $imp1 = collect();
        $imp2 = collect();

        $imp1->put('debe', $data2['debe1']);
        $imp1->put('haber', $data2['haber1']);
        $imp1->put('id_operacion', 1);
        $imp1->put('id_imputacion', 1);

        $imp2->put('debe', $data2['debe2']);
        $imp2->put('haber', $data2['haber2']);
        $imp2->put('id_operacion', 1);
        $imp2->put('id_imputacion', 2);
        unset($data2['debe1'], $data2['debe2'], $data2['haber1'], $data2['haber2'], $data2['id'], $data2['imputacion1'], $data2['imputacion2']);

        $this->assertDatabaseHas('operaciones', $data2);
        $this->assertDatabaseHas('operacion_imputacion', $imp1->toArray());
        $this->assertDatabaseHas('operacion_imputacion', $imp2->toArray());
    }
}
